{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Copyright (c) 2020. Adam Arthur Faizal. All Rights Reserved\n */\nimport React, { Component, useState } from 'react';\nimport Head from \"next/head\";\nimport Link from \"next/link\";\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport { Breadcrumb, BreadcrumbItem, Button, Card, CardBody, CardColumns, CardDeck, CardFooter, CardGroup, CardHeader, CardImg, CardImgOverlay, CardLink, CardSubtitle, CardText, CardTitle, Carousel, CarouselCaption, CarouselControl, CarouselIndicators, CarouselItem, Col, Collapse, Container, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Jumbotron, Media, Nav, Navbar, NavbarBrand, NavbarText, NavbarToggler, NavItem, Pagination, PaginationItem, PaginationLink, Row, UncontrolledDropdown } from 'reactstrap';\nimport CarouselLab from \"../components/Beranda/CarouselLab/CarouselLab\";\nimport Berita from \"../components/Beranda/Berita/Berita\";\nimport SOP from \"../components/Beranda/SOP/SOP\";\nimport Asisten from \"../components/Beranda/Asisten/Asisten\";\nexport default class Home extends Component {\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Laboratorium Komputasi FMIPA UNS\"), __jsx(\"link\", {\n      rel: \"icon\",\n      href: \"/favicon.ico\"\n    })), __jsx(AppHeader, null, __jsx(AppNavbar, null)), __jsx(AppMain, null), __jsx(AppFooter, null));\n  }\n\n}\nexport function AppNavbar() {\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return __jsx(Navbar, {\n    color: \"info\",\n    dark: true,\n    fixed: \"top\",\n    expand: \"md\",\n    className: \"App-nav shadow\"\n  }, __jsx(Container, {\n    fluid: true,\n    className: \"text-center\"\n  }, __jsx(NavbarBrand, {\n    href: \"/\",\n    className: \"font-weight-bold\"\n  }, __jsx(\"img\", {\n    src: \"/img/logo.svg\",\n    alt: \"Labkom\",\n    width: \"30\",\n    height: \"30\",\n    className: \"d-inline-block align-top mr-1\"\n  })), __jsx(NavbarToggler, {\n    onClick: toggle\n  }), __jsx(Collapse, {\n    isOpen: isOpen,\n    navbar: true\n  }, __jsx(Nav, {\n    className: \"mr-auto\",\n    navbar: true\n  }, __jsx(NavItem, null, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", {\n    className: \"nav-link active\"\n  }, \"Beranda\"))), __jsx(UncontrolledDropdown, {\n    nav: true,\n    inNavbar: true\n  }, __jsx(DropdownToggle, {\n    nav: true,\n    caret: true\n  }, \"Profil\"), __jsx(DropdownMenu, {\n    right: true\n  }, __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Profil/VisiMisi\"\n  }, __jsx(\"a\", null, \"Visi & Misi\"))), __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Profil/Sejarah\"\n  }, __jsx(\"a\", null, \"Sejarah\"))), __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Profil/StrukturOrganisasi\"\n  }, __jsx(\"a\", null, \"Struktur Organisasi\"))))), __jsx(UncontrolledDropdown, {\n    nav: true,\n    inNavbar: true\n  }, __jsx(DropdownToggle, {\n    nav: true,\n    caret: true\n  }, \"Fasilitas\"), __jsx(DropdownMenu, {\n    right: true\n  }, __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Fasilitas/LabDataScience\"\n  }, __jsx(\"a\", null, \"Lab Data Science\"))), __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Fasilitas/LabMikrokontroller\"\n  }, __jsx(\"a\", null, \"Lab Mikrokontroller\"))), __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Fasilitas/LabMultimedia\"\n  }, __jsx(\"a\", null, \"Lab Multimedia\"))), __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Fasilitas/LabPemrograman\"\n  }, __jsx(\"a\", null, \"Lab Pemrograman\"))), __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Fasilitas/LabRPL\"\n  }, __jsx(\"a\", null, \"Lab RPL\"))))), __jsx(UncontrolledDropdown, {\n    nav: true,\n    inNavbar: true\n  }, __jsx(DropdownToggle, {\n    nav: true,\n    caret: true\n  }, \"Layanan\"), __jsx(DropdownMenu, {\n    right: true\n  }, __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Layanan/PeminjamanAlat\"\n  }, __jsx(\"a\", null, \"Peminjaman Alat\"))), __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Layanan/PeminjamanRuang\"\n  }, __jsx(\"a\", null, \"Peminjaman Ruang\"))), __jsx(DropdownItem, {\n    className: \"d-flex flex-column text-center pr-0 pl-0\"\n  }, __jsx(Link, {\n    href: \"/Layanan/PeminjamanStudio\"\n  }, __jsx(\"a\", null, \"Peminjaman Studio\"))))), __jsx(NavItem, null, __jsx(Link, {\n    href: \"/Contact\"\n  }, __jsx(\"a\", {\n    className: \"nav-link\"\n  }, \"Contact\")))), __jsx(NavbarText, null, \"React Js version : \", React.version))));\n}\nexport class AppHeader extends Component {\n  render() {\n    return __jsx(\"header\", {\n      className: \"App-header\"\n    }, this.props.children, __jsx(Jumbotron, {\n      className: \"d-flex flex-column align-items-center justify-content-center m-0\"\n    }, __jsx(\"h1\", {\n      className: \"display-3 font-weight-bold text-light mt-4 mb-0\"\n    }, \"Laboratorium \", __jsx(\"span\", {\n      className: \"labkom\"\n    }, \"Komputasi\"), \" FMIPA\"), __jsx(\"h1\", {\n      className: \"display-4 text-light m-0\"\n    }, \"Universitas Sebelas Maret\")));\n  }\n\n}\nexport class AppMain extends Component {\n  render() {\n    return __jsx(\"main\", {\n      className: \"App-main\"\n    }, __jsx(CarouselLab, null), __jsx(Berita, null), __jsx(SOP, null), __jsx(Asisten, null));\n  }\n\n}\nexport class AppFooter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    };\n  }\n\n  componentDidMount() {\n    this.now = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.now);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return __jsx(\"footer\", {\n      className: \"App-footer d-flex flex-column align-items-center justify-content-center\"\n    }, __jsx(Row, null, __jsx(Col, {\n      md: \"12\",\n      className: \"p-0\"\n    }, __jsx(\"p\", {\n      className: \"text-white m-0\"\n    }, \"Copyright \\xA9 \", this.state.date.getFullYear(), \". Laboratorium Komputasi FMIPA UNS. All Rights Reserved.\"))));\n  }\n\n} // Prop-Types\n\nNavbar.propTypes = {\n  light: PropTypes.bool,\n  dark: PropTypes.bool,\n  fixed: PropTypes.string,\n  color: PropTypes.string,\n  role: PropTypes.string,\n  expand: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]) // pass in custom element to use\n\n};\nNavbarBrand.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]) // pass in custom element to use\n\n};\nNavbarText.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]) // pass in custom element to use\n\n};\nContainer.propTypes = {\n  fluid: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]) // applies .container-fluid class if bool or .container-{breakpoint} if string\n\n};\nRow.propTypes = {\n  noGutters: PropTypes.bool,\n  // see https://reactstrap.github.io/components/form Form Grid with Form Row\n  form: PropTypes.bool,\n  xs: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  sm: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  md: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  lg: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  xl: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nconst stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nconst columnProps = PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.shape({\n  size: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\n  // example size values:\n  // 12 || \"12\" => col-12 or col-`width`-12\n  // auto => col-auto or col-`width`-auto\n  // true => col or col-`width`\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nCol.propTypes = {\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  // override the predefined width (the ones above) with your own custom widths.\n  // see https://github.com/reactstrap/reactstrap/issues/297#issuecomment-273556116\n  widths: PropTypes.array\n};\nJumbotron.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  fluid: PropTypes.bool,\n  className: PropTypes.string\n};\nCard.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  className: PropTypes.string\n};\nCardBody.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nCardColumns.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nCardDeck.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nCardFooter.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nCardGroup.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nCardHeader.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nCardImg.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  // Use top or bottom to position image via \"card-img-top\" or \"card-img-bottom\"\n  top: PropTypes.bool,\n  bottom: PropTypes.bool\n};\nCardImgOverlay.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nCardLink.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  // ref will only get you a reference to the CardLink component, use innerRef to get a reference to the DOM element (for things like focus management).\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nCardSubtitle.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nCardText.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nCardTitle.propTypes = {\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nButton.propTypes = {\n  active: PropTypes.bool,\n  'aria-label': PropTypes.string,\n  block: PropTypes.bool,\n  color: PropTypes.string,\n  // default: 'secondary'\n  disabled: PropTypes.bool,\n  outline: PropTypes.bool,\n  // Pass in a Component to override default button element\n  // example: react-router Link\n  // default: 'button'\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.shape({\n    $$typeof: PropTypes.symbol,\n    render: PropTypes.func\n  }), PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.shape({\n    $$typeof: PropTypes.symbol,\n    render: PropTypes.func\n  })]))]),\n  // ref will only get you a reference to the Button component, use innerRef to get a reference to the DOM element (for things like focus management).\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  onClick: PropTypes.func,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  // use close prop for BS4 close icon utility\n  close: PropTypes.bool\n};\nButton.defaultProps = {\n  color: 'secondary',\n  tag: 'button'\n};\nPagination.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  listClassName: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  listTag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  'aria-label': PropTypes.string\n};\nPaginationItem.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  disabled: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nPaginationLink.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  next: PropTypes.bool,\n  previous: PropTypes.bool,\n  first: PropTypes.bool,\n  last: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  'aria-label': PropTypes.string\n};\nMedia.propTypes = {\n  body: PropTypes.bool,\n  bottom: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  heading: PropTypes.bool,\n  left: PropTypes.bool,\n  list: PropTypes.bool,\n  middle: PropTypes.bool,\n  object: PropTypes.bool,\n  right: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  top: PropTypes.bool\n};\nCarousel.propTypes = {\n  // the current active slide of the carousel\n  activeIndex: PropTypes.number,\n  // a function which should advance the carousel to the next slide (via activeIndex)\n  next: PropTypes.func.isRequired,\n  // a function which should advance the carousel to the previous slide (via activeIndex)\n  previous: PropTypes.func.isRequired,\n  // controls if the left and right arrow keys should control the carousel\n  keyboard: PropTypes.bool,\n\n  /* If set to \"hover\", pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on\n   * mouseleave. If set to false, hovering over the carousel won't pause it. (default: \"hover\")\n   */\n  pause: PropTypes.oneOf(['hover', false]),\n  // Autoplays the carousel after the user manually cycles the first item. If \"carousel\", autoplays the carousel on load.\n  // This is how bootstrap defines it... I would prefer a bool named autoplay or something...\n  ride: PropTypes.oneOf(['carousel']),\n  // the interval at which the carousel automatically cycles (default: 5000)\n  // If set to false, carousel will not Autoplay (i.e. will not automatically cycle).\n  interval: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n  children: PropTypes.array,\n  // called when the mouse enters the Carousel\n  mouseEnter: PropTypes.func,\n  // called when the mouse exits the Carousel\n  mouseLeave: PropTypes.func,\n  // controls whether the slide animation on the Carousel works or not\n  slide: PropTypes.bool,\n  cssModule: PropTypes.object,\n  // controls whether the touch gestures on the Carousel works or not (default: true)\n  enableTouch: PropTypes.bool\n};\nCarouselItem.propTypes = _objectSpread(_objectSpread({}, Transition.propTypes), {}, {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  in: PropTypes.bool,\n  cssModule: PropTypes.object,\n  children: PropTypes.node,\n  slide: PropTypes.bool\n});\nCarouselControl.propTypes = {\n  direction: PropTypes.oneOf(['prev', 'next']).isRequired,\n  onClickHandler: PropTypes.func.isRequired,\n  cssModule: PropTypes.object,\n  directionText: PropTypes.string\n};\nCarouselIndicators.propTypes = {\n  items: PropTypes.array.isRequired,\n  activeIndex: PropTypes.number.isRequired,\n  cssModule: PropTypes.object,\n  onClickHandler: PropTypes.func.isRequired\n};\nCarouselCaption.propTypes = {\n  captionHeader: PropTypes.node,\n  captionText: PropTypes.node.isRequired,\n  cssModule: PropTypes.object\n};\nDropdown.propTypes = {\n  a11y: PropTypes.bool,\n  // defaults to true. Set to false to enable more bootstrap like tabbing behavior\n  disabled: PropTypes.bool,\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n  group: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  // For Dropdown usage inside a Nav\n  nav: PropTypes.bool,\n  active: PropTypes.bool,\n  // For Dropdown usage inside a Navbar (disables popper)\n  inNavbar: PropTypes.bool,\n  tag: PropTypes.string,\n  // default: 'div' unless nav=true, then 'li'\n  toggle: PropTypes.func,\n  setActiveFromChild: PropTypes.bool\n};\nDropdownToggle.propTypes = {\n  caret: PropTypes.bool,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  'data-toggle': PropTypes.string,\n  'aria-haspopup': PropTypes.bool,\n  // For DropdownToggle usage inside a Nav\n  nav: PropTypes.bool,\n  // Defaults to Button component\n  tag: PropTypes.any\n};\nDropdownMenu.propTypes = {\n  tag: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  right: PropTypes.bool,\n  flip: PropTypes.bool,\n  // default: true,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  // Custom modifiers that are passed to DropdownMenu.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  persist: PropTypes.bool,\n  // presist the popper, even when closed. See #779 for reasoning\n  // passed to popper, see https://popper.js.org/popper-documentation.html#Popper.Defaults.positionFixed\n  positionFixed: PropTypes.bool\n};\nDropdownItem.propTypes = {\n  children: PropTypes.node,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  divider: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  header: PropTypes.bool,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  toggle: PropTypes.bool // default: true\n\n};\nBreadcrumb.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  listTag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  listClassName: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.node,\n  'aria-label': PropTypes.string\n};\nBreadcrumbItem.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}